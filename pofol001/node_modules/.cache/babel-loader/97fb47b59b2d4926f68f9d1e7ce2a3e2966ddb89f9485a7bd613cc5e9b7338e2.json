{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjsdl\\\\Desktop\\\\portfolio\\\\pofol001\\\\src\\\\views\\\\pages\\\\Weather.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../css/Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Weather = () => {\n  _s();\n  const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\n  const [forecast, setForecast] = useState([]);\n  const [city, setCity] = useState('Seoul'); // 기본 도시를 서울로 설정\n\n  useEffect(() => {\n    const fetchWeatherData = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\n        const data = await response.json();\n\n        // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\n        const currentTime = new Date().getTime();\n        const sortedForecast = data.list.sort((a, b) => {\n          const timeA = new Date(a.dt_txt).getTime();\n          const timeB = new Date(b.dt_txt).getTime();\n          return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\n        });\n        setForecast(sortedForecast);\n      } catch (error) {\n        console.error('Error fetching the weather data', error);\n      }\n    };\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeatherData(position.coords.latitude, position.coords.longitude);\n      }, () => {\n        fetchWeatherByCity('Seoul');\n      });\n    } else {\n      fetchWeatherByCity('Seoul');\n    }\n  }, []);\n  const fetchWeatherByCity = selectedCity => {\n    setCity(selectedCity);\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=${API_KEY}&units=metric&lang=kr`).then(response => response.json()).then(data => {\n      // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\n      const currentTime = new Date().getTime();\n      const sortedForecast = data.list.sort((a, b) => {\n        const timeA = new Date(a.dt_txt).getTime();\n        const timeB = new Date(b.dt_txt).getTime();\n        return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\n      });\n      setForecast(sortedForecast);\n    }).catch(error => console.error('Error fetching the weather data', error));\n  };\n  const handleCityChange = event => {\n    const selectedCity = event.target.value;\n    fetchWeatherByCity(selectedCity);\n  };\n  const getKoreanDayOfWeek = dateStr => {\n    const date = new Date(dateStr);\n    date.setUTCHours(date.getUTCHours() + 9); // UTC 기준으로 9시간 뺌\n    const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n    return daysInKorean[date.getUTCDay()];\n  };\n  const formatTime = (timeStr, forToday) => {\n    if (timeStr === '00:00' && forToday) {\n      return '24:00';\n    }\n    return timeStr;\n  };\n  const currentTime = new Date().getTime();\n  const today = new Date().toLocaleDateString(\"ko-KR\", {\n    timeZone: \"Asia/Seoul\",\n    weekday: \"short\"\n  });\n  const startOfTomorrow = new Date(currentTime + 24 * 60 * 60 * 1000);\n  startOfTomorrow.setHours(0, 0, 0, 0);\n  const todayForecast = forecast.filter(entry => {\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\n    return entryDate >= new Date(currentTime) && entryDate < startOfTomorrow;\n  });\n  const tomorrowForecast = forecast.filter(entry => {\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\n    return entryDate >= startOfTomorrow;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather-Wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Title\",\n      children: \"\\uB0A0\\uC528\\uC815\\uBCF4\\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: city,\n      onChange: handleCityChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Seoul\",\n        children: \"\\uC11C\\uC6B8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Busan\",\n        children: \"\\uBD80\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Incheon\",\n        children: \"\\uC778\\uCC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Daegu\",\n        children: \"\\uB300\\uAD6C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Daejeon\",\n        children: \"\\uB300\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Gwangju\",\n        children: \"\\uAD11\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Suwon\",\n        children: \"\\uC218\\uC6D0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Ulsan\",\n        children: \"\\uC6B8\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Seongnam\",\n        children: \"\\uC131\\uB0A8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Goyang\",\n        children: \"\\uACE0\\uC591\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Yongin\",\n        children: \"\\uC6A9\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Bucheon\",\n        children: \"\\uBD80\\uCC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Ansan\",\n        children: \"\\uC548\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Jeju\",\n        children: \"\\uC81C\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Anyang\",\n        children: \"\\uC548\\uC591\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Gimhae\",\n        children: \"\\uAE40\\uD574\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Pohang\",\n        children: \"\\uD3EC\\uD56D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Cheongju\",\n        children: \"\\uCCAD\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"forecast-day\",\n        children: today\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uC624\\uB298\\uC758 \\uB0A0\\uC528 (\", today, \", \\uD604\\uC7AC \\uC2DC\\uAC04\\uBD80\\uD130 24\\uC2DC\\uAC04)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), todayForecast.length > 0 ? todayForecast.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC2DC\\uAC04: \", formatTime(entry.dt_txt.split(\" \")[1].slice(0, 5), true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC628\\uB3C4: \", entry.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uB0A0\\uC528: \", entry.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`,\n          alt: entry.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB0A0\\uC528 \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB2E4\\uC74C \\uB0A0\\uC528\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), tomorrowForecast.length > 0 ? tomorrowForecast.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC694\\uC77C: \", getKoreanDayOfWeek(entry.dt_txt)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC2DC\\uAC04: \", formatTime(entry.dt_txt.split(\" \")[1].slice(0, 5), false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC628\\uB3C4: \", entry.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uB0A0\\uC528: \", entry.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`,\n          alt: entry.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB0A0\\uC528 \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"EjJ9kHIATIF+cyKaMFVTuShPXtc=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Weather","_s","API_KEY","forecast","setForecast","city","setCity","fetchWeatherData","latitude","longitude","response","fetch","data","json","currentTime","Date","getTime","sortedForecast","list","sort","a","b","timeA","dt_txt","timeB","Math","abs","error","console","navigator","geolocation","getCurrentPosition","position","coords","fetchWeatherByCity","selectedCity","then","catch","handleCityChange","event","target","value","getKoreanDayOfWeek","dateStr","date","setUTCHours","getUTCHours","daysInKorean","getUTCDay","formatTime","timeStr","forToday","today","toLocaleDateString","timeZone","weekday","startOfTomorrow","setHours","todayForecast","filter","entry","entryDate","replace","tomorrowForecast","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","length","map","index","split","slice","main","temp","weather","description","src","icon","alt","_c","$RefreshReg$"],"sources":["C:/Users/tjsdl/Desktop/portfolio/pofol001/src/views/pages/Weather.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport '../css/Weather.css';\r\n\r\nexport const Weather = () => {\r\n    const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\r\n    const [forecast, setForecast] = useState([]);\r\n    const [city, setCity] = useState('Seoul'); // 기본 도시를 서울로 설정\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async (latitude, longitude) => {\r\n            try {\r\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\r\n                const data = await response.json();\r\n\r\n                // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\r\n                const currentTime = new Date().getTime();\r\n                const sortedForecast = data.list.sort((a, b) => {\r\n                    const timeA = new Date(a.dt_txt).getTime();\r\n                    const timeB = new Date(b.dt_txt).getTime();\r\n                    return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\r\n                });\r\n\r\n                setForecast(sortedForecast);\r\n            } catch (error) {\r\n                console.error('Error fetching the weather data', error);\r\n            }\r\n        };\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                fetchWeatherData(position.coords.latitude, position.coords.longitude);\r\n            }, () => {\r\n                fetchWeatherByCity('Seoul');\r\n            });\r\n        } else {\r\n            fetchWeatherByCity('Seoul');\r\n        }\r\n    }, []);\r\n\r\n    const fetchWeatherByCity = (selectedCity) => {\r\n        setCity(selectedCity);\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=${API_KEY}&units=metric&lang=kr`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\r\n                const currentTime = new Date().getTime();\r\n                const sortedForecast = data.list.sort((a, b) => {\r\n                    const timeA = new Date(a.dt_txt).getTime();\r\n                    const timeB = new Date(b.dt_txt).getTime();\r\n                    return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\r\n                });\r\n\r\n                setForecast(sortedForecast);\r\n            })\r\n            .catch(error => console.error('Error fetching the weather data', error));\r\n    }\r\n\r\n    const handleCityChange = (event) => {\r\n        const selectedCity = event.target.value;\r\n        fetchWeatherByCity(selectedCity);\r\n    }\r\n\r\n    const getKoreanDayOfWeek = (dateStr) => {\r\n        const date = new Date(dateStr);\r\n        date.setUTCHours(date.getUTCHours() +9); // UTC 기준으로 9시간 뺌\r\n        const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n        return daysInKorean[date.getUTCDay()];\r\n    }\r\n\r\nconst formatTime = (timeStr, forToday) => {\r\n    if (timeStr === '00:00' && forToday) {\r\n        return '24:00';\r\n    }\r\n    return timeStr;\r\n};\r\n\r\nconst currentTime = new Date().getTime();\r\nconst today = new Date().toLocaleDateString(\"ko-KR\", { timeZone: \"Asia/Seoul\", weekday: \"short\" });\r\nconst startOfTomorrow = new Date(currentTime + 24 * 60 * 60 * 1000);\r\nstartOfTomorrow.setHours(0, 0, 0, 0);\r\n\r\nconst todayForecast = forecast.filter(entry => {\r\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\r\n    return entryDate >= new Date(currentTime) && entryDate < startOfTomorrow;\r\n});\r\n\r\nconst tomorrowForecast = forecast.filter(entry => {\r\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\r\n    return entryDate >= startOfTomorrow;\r\n});\r\n\r\nreturn (\r\n    <div className=\"Weather-Wrap\">\r\n        <h1 className=\"Title\">날씨정보페이지</h1>\r\n      \r\n        <select value={city} onChange={handleCityChange}>\r\n                <option value=\"Seoul\">서울</option>\r\n                <option value=\"Busan\">부산</option>\r\n                <option value=\"Incheon\">인천</option>\r\n                <option value=\"Daegu\">대구</option>\r\n                <option value=\"Daejeon\">대전</option>\r\n                <option value=\"Gwangju\">광주</option>\r\n                <option value=\"Suwon\">수원</option>\r\n                <option value=\"Ulsan\">울산</option>\r\n                <option value=\"Seongnam\">성남</option>\r\n                <option value=\"Goyang\">고양</option>\r\n                <option value=\"Yongin\">용인</option>\r\n                <option value=\"Bucheon\">부천</option>\r\n                <option value=\"Ansan\">안산</option>\r\n                <option value=\"Jeju\">제주</option>\r\n                <option value=\"Anyang\">안양</option>\r\n                <option value=\"Gimhae\">김해</option>\r\n                <option value=\"Pohang\">포항</option>\r\n                <option value=\"Cheongju\">청주</option>\r\n            </select>\r\n\r\n        <div className='forecast-row'>\r\n            <span className='forecast-day'>{today}</span>\r\n            <h2>오늘의 날씨 ({today}, 현재 시간부터 24시간)</h2>\r\n            {todayForecast.length > 0 ? (\r\n                todayForecast.map((entry, index) => (\r\n                    <div key={index} className=\"forecast-entry\">\r\n                        <div className='forecast_text'>시간: {formatTime(entry.dt_txt.split(\" \")[1].slice(0, 5), true)}</div>\r\n                        <div className='forecast_text'>온도: {entry.main.temp}°C</div>\r\n                        <div className='forecast_text'>날씨: {entry.weather[0].description}</div>\r\n                        <img src={`http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`} alt={entry.weather[0].description} />\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>날씨 데이터를 가져오는 중...</p>\r\n            )}\r\n        </div>\r\n        \r\n        <div>\r\n            <h2>다음 날씨</h2>\r\n            {tomorrowForecast.length > 0 ? (\r\n                tomorrowForecast.map((entry, index) => (\r\n                    <div key={index} className=\"forecast-entry\">\r\n                        <div className='forecast_text'>요일: {getKoreanDayOfWeek(entry.dt_txt)}</div>\r\n                        <div className='forecast_text'>시간: {formatTime(entry.dt_txt.split(\" \")[1].slice(0, 5), false)}</div>\r\n                        <div className='forecast_text'>온도: {entry.main.temp}°C</div>\r\n                        <div className='forecast_text'>날씨: {entry.weather[0].description}</div>\r\n                        <img src={`http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`} alt={entry.weather[0].description} />\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>날씨 데이터를 가져오는 중...</p>\r\n            )}\r\n        </div>\r\n    </div>\r\n);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}