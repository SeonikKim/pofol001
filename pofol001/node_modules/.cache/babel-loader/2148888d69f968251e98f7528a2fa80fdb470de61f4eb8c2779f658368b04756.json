{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjsdl\\\\Desktop\\\\portfolio\\\\pofol001\\\\src\\\\views\\\\pages\\\\Weather.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../css/Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Weather = () => {\n  _s();\n  const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\n  const [forecast, setForecast] = useState([]);\n  const [city, setCity] = useState('Seoul');\n  const [selectedDay, setSelectedDay] = useState(\"\");\n  useEffect(() => {\n    const fetchWeatherData = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\n        const data = await response.json();\n        setForecast(data.list);\n      } catch (error) {\n        console.error('Error fetching the weather data', error);\n      }\n    };\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeatherData(position.coords.latitude, position.coords.longitude);\n      }, () => {\n        fetchWeatherByCity('Seoul');\n      });\n    } else {\n      fetchWeatherByCity('Seoul');\n    }\n  }, []);\n  const fetchWeatherByCity = selectedCity => {\n    setCity(selectedCity);\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=${API_KEY}&units=metric&lang=kr`).then(response => response.json()).then(data => {\n      setForecast(data.list);\n    }).catch(error => console.error('Error fetching the weather data', error));\n  };\n  const handleCityChange = event => {\n    fetchWeatherByCity(event.target.value);\n  };\n  const startOfDay = new Date();\n  startOfDay.setHours(0, 0, 0, 0);\n  const endOfDay = new Date(startOfDay);\n  endOfDay.setDate(startOfDay.getDate() + 1);\n  const todayForecast = forecast.filter(entry => {\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\n    return entryDate >= startOfDay && entryDate < endOfDay;\n  });\n  const subsequentForecast = forecast.filter(entry => {\n    const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\n    return entryDate >= endOfDay;\n  });\n  const groupedForecast = subsequentForecast.reduce((acc, entry) => {\n    const dayOfWeek = getKoreanDayOfWeek(entry.dt_txt);\n    if (!acc[dayOfWeek]) acc[dayOfWeek] = [];\n    acc[dayOfWeek].push(entry);\n    return acc;\n  }, {});\n\n  //요일\n  const getKoreanDayOfWeek = dateStr => {\n    const date = new Date(dateStr);\n    date.setUTCHours(date.getUTCHours() + 9); // UTC 기준으로 9시간 뺌\n    const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n    return daysInKorean[date.getUTCDay()];\n  };\n\n  ///추가\n\n  const groupByDay = entries => {\n    return entries.reduce((acc, entry) => {\n      const day = getKoreanDayOfWeek(entry.dt_txt);\n      if (!acc[day]) acc[day] = [];\n      acc[day].push(entry);\n      return acc;\n    }, {});\n  };\n  const getWeatherPriority = weatherList => {\n    const priorities = {\n      '눈': ['Snow'],\n      '비': ['Rain', 'Drizzle', 'Thunderstorm'],\n      '구름': ['Clouds'],\n      '흐림': ['Mist', 'Fog', 'Haze'],\n      '맑음': ['Clear']\n    };\n    for (let koreanTerm in priorities) {\n      for (let term of priorities[koreanTerm]) {\n        if (weatherList.includes(term)) {\n          return koreanTerm;\n        }\n      }\n    }\n    return '맑음';\n  };\n  const showModal = dayForecast => {\n    setSelectedDay(dayForecast);\n  };\n  const dayGroupedForecast = groupByDay(subsequentForecast);\n\n  ///추가\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather-Wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Title\",\n      children: \"\\uB0A0\\uC528\\uC815\\uBCF4\\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: city,\n      onChange: handleCityChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Seoul\",\n        children: \"\\uC11C\\uC6B8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Busan\",\n        children: \"\\uBD80\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Incheon\",\n        children: \"\\uC778\\uCC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Daegu\",\n        children: \"\\uB300\\uAD6C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Daejeon\",\n        children: \"\\uB300\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Gwangju\",\n        children: \"\\uAD11\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Suwon\",\n        children: \"\\uC218\\uC6D0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Ulsan\",\n        children: \"\\uC6B8\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Seongnam\",\n        children: \"\\uC131\\uB0A8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Goyang\",\n        children: \"\\uACE0\\uC591\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Yongin\",\n        children: \"\\uC6A9\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Bucheon\",\n        children: \"\\uBD80\\uCC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Ansan\",\n        children: \"\\uC548\\uC0B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Jeju\",\n        children: \"\\uC81C\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Anyang\",\n        children: \"\\uC548\\uC591\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Gimhae\",\n        children: \"\\uAE40\\uD574\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Pohang\",\n        children: \"\\uD3EC\\uD56D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Cheongju\",\n        children: \"\\uCCAD\\uC8FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-row\",\n      children: todayForecast.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC2DC\\uAC04: \", entry.dt_txt.split(\" \")[1].slice(0, 5)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC628\\uB3C4: \", entry.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uB0A0\\uC528: \", entry.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`,\n          alt: entry.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-col\",\n      children: Object.keys(dayGroupedForecast).map(day => {\n        const dayWeather = dayGroupedForecast[day];\n        const minTemp = Math.min(...dayWeather.map(entry => entry.main.temp));\n        const maxTemp = Math.max(...dayWeather.map(entry => entry.main.temp));\n        const iconPriority = getWeatherPriority(dayWeather.map(entry => entry.weather[0].main.toLowerCase()));\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-entry\",\n          onClick: () => showModal(dayWeather),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast_text\",\n            children: [\"\\uC694\\uC77C: \", day]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast_text\",\n            children: [\"\\uC628\\uB3C4: \", minTemp, \"\\xB0C ~ \", maxTemp, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://openweathermap.org/img/wn/${iconPriority}.png`,\n            alt: iconPriority\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), selectedDay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [selectedDay.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC2DC\\uAC04: \", entry.dt_txt.split(\" \")[1].slice(0, 5)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uC628\\uB3C4: \", entry.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_text\",\n          children: [\"\\uB0A0\\uC528: \", entry.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`,\n          alt: entry.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedDay(null),\n        children: \"\\uB2EB\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"7919y4Rd12h9Q3xSuAxu39j/6d8=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Weather","_s","API_KEY","forecast","setForecast","city","setCity","selectedDay","setSelectedDay","fetchWeatherData","latitude","longitude","response","fetch","data","json","list","error","console","navigator","geolocation","getCurrentPosition","position","coords","fetchWeatherByCity","selectedCity","then","catch","handleCityChange","event","target","value","startOfDay","Date","setHours","endOfDay","setDate","getDate","todayForecast","filter","entry","entryDate","dt_txt","replace","subsequentForecast","groupedForecast","reduce","acc","dayOfWeek","getKoreanDayOfWeek","push","dateStr","date","setUTCHours","getUTCHours","daysInKorean","getUTCDay","groupByDay","entries","day","getWeatherPriority","weatherList","priorities","koreanTerm","term","includes","showModal","dayForecast","dayGroupedForecast","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","index","split","slice","main","temp","weather","description","src","icon","alt","Object","keys","dayWeather","minTemp","Math","min","maxTemp","max","iconPriority","toLowerCase","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tjsdl/Desktop/portfolio/pofol001/src/views/pages/Weather.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport '../css/Weather.css';\r\n\r\nexport const Weather = () => {\r\n    const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\r\n    const [forecast, setForecast] = useState([]);\r\n    const [city, setCity] = useState('Seoul');\r\n    const [selectedDay, setSelectedDay] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async (latitude, longitude) => {\r\n            try {\r\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\r\n                const data = await response.json();\r\n                setForecast(data.list);\r\n            } catch (error) {\r\n                console.error('Error fetching the weather data', error);\r\n            }\r\n        };\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                fetchWeatherData(position.coords.latitude, position.coords.longitude);\r\n            }, () => {\r\n                fetchWeatherByCity('Seoul');\r\n            });\r\n        } else {\r\n            fetchWeatherByCity('Seoul');\r\n        }\r\n    }, []);\r\n\r\n    const fetchWeatherByCity = (selectedCity) => {\r\n        setCity(selectedCity);\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=${API_KEY}&units=metric&lang=kr`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setForecast(data.list);\r\n            })\r\n            .catch(error => console.error('Error fetching the weather data', error));\r\n    }\r\n\r\n    const handleCityChange = (event) => {\r\n        fetchWeatherByCity(event.target.value);\r\n    }\r\n\r\n    const startOfDay = new Date();\r\n    startOfDay.setHours(0, 0, 0, 0);\r\n    const endOfDay = new Date(startOfDay);\r\n    endOfDay.setDate(startOfDay.getDate() + 1);\r\n\r\n    const todayForecast = forecast.filter(entry => {\r\n        const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\r\n        return entryDate >= startOfDay && entryDate < endOfDay;\r\n    });\r\n\r\n    const subsequentForecast = forecast.filter(entry => {\r\n        const entryDate = new Date(entry.dt_txt.replace(\" \", \"T\"));\r\n        return entryDate >= endOfDay;\r\n    });\r\n    const groupedForecast = subsequentForecast.reduce((acc, entry) => {\r\n        const dayOfWeek = getKoreanDayOfWeek(entry.dt_txt);\r\n        if (!acc[dayOfWeek]) acc[dayOfWeek] = [];\r\n        acc[dayOfWeek].push(entry);\r\n        return acc;\r\n    }, {});\r\n    \r\n    //요일\r\n    const getKoreanDayOfWeek = (dateStr) => {\r\n        const date = new Date(dateStr);\r\n        date.setUTCHours(date.getUTCHours() +9); // UTC 기준으로 9시간 뺌\r\n        const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n        return daysInKorean[date.getUTCDay()];\r\n    }\r\n\r\n\r\n\r\n\r\n    ///추가\r\n\r\n\r\n    \r\n    const groupByDay = (entries) => {\r\n        return entries.reduce((acc, entry) => {\r\n            const day = getKoreanDayOfWeek(entry.dt_txt);\r\n            if (!acc[day]) acc[day] = [];\r\n            acc[day].push(entry);\r\n            return acc;\r\n        }, {});\r\n    };\r\n\r\n    const getWeatherPriority = (weatherList) => {\r\n        const priorities = {\r\n            '눈': ['Snow'],\r\n            '비': ['Rain', 'Drizzle', 'Thunderstorm'],\r\n            '구름': ['Clouds'],\r\n            '흐림': ['Mist', 'Fog', 'Haze'],\r\n            '맑음': ['Clear']\r\n        };\r\n    \r\n        for (let koreanTerm in priorities) {\r\n            for (let term of priorities[koreanTerm]) {\r\n                if (weatherList.includes(term)) {\r\n                    return koreanTerm;\r\n                }\r\n            }\r\n        }\r\n        return '맑음';\r\n    };\r\n\r\n    const showModal = (dayForecast) => {\r\n        setSelectedDay(dayForecast);\r\n    };\r\n\r\n    const dayGroupedForecast = groupByDay(subsequentForecast);\r\n\r\n\r\n///추가\r\n\r\n\r\n\r\nreturn (\r\n    <div className=\"Weather-Wrap\">\r\n        <h1 className=\"Title\">날씨정보페이지</h1>\r\n      \r\n            <select value={city} onChange={handleCityChange}>\r\n                <option value=\"Seoul\">서울</option>\r\n                <option value=\"Busan\">부산</option>\r\n                <option value=\"Incheon\">인천</option>\r\n                <option value=\"Daegu\">대구</option>\r\n                <option value=\"Daejeon\">대전</option>\r\n                <option value=\"Gwangju\">광주</option>\r\n                <option value=\"Suwon\">수원</option>\r\n                <option value=\"Ulsan\">울산</option>\r\n                <option value=\"Seongnam\">성남</option>\r\n                <option value=\"Goyang\">고양</option>\r\n                <option value=\"Yongin\">용인</option>\r\n                <option value=\"Bucheon\">부천</option>\r\n                <option value=\"Ansan\">안산</option>\r\n                <option value=\"Jeju\">제주</option>\r\n                <option value=\"Anyang\">안양</option>\r\n                <option value=\"Gimhae\">김해</option>\r\n                <option value=\"Pohang\">포항</option>\r\n                <option value=\"Cheongju\">청주</option>\r\n            </select>\r\n\r\n            <div className='forecast-row'>\r\n                {todayForecast.map((entry, index) => (\r\n                    <div key={index} className=\"forecast-entry\">\r\n                        <div className='forecast_text'>시간: {entry.dt_txt.split(\" \")[1].slice(0, 5)}</div>\r\n                        <div className='forecast_text'>온도: {entry.main.temp}°C</div>\r\n                        <div className='forecast_text'>날씨: {entry.weather[0].description}</div>\r\n                        <img src={`http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`} alt={entry.weather[0].description} />\r\n                    </div>\r\n                ))}\r\n        </div>\r\n\r\n        <div className='forecast-col'>\r\n                {Object.keys(dayGroupedForecast).map(day => {\r\n                    const dayWeather = dayGroupedForecast[day];\r\n                    const minTemp = Math.min(...dayWeather.map(entry => entry.main.temp));\r\n                    const maxTemp = Math.max(...dayWeather.map(entry => entry.main.temp));\r\n                    const iconPriority = getWeatherPriority(dayWeather.map(entry => entry.weather[0].main.toLowerCase()));\r\n\r\n                    return (\r\n                        <div key={day} className=\"forecast-entry\" onClick={() => showModal(dayWeather)}>\r\n                            <div className='forecast_text'>요일: {day}</div>\r\n                            <div className='forecast_text'>온도: {minTemp}°C ~ {maxTemp}°C</div>\r\n                            <img src={`http://openweathermap.org/img/wn/${iconPriority}.png`} alt={iconPriority} />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            {selectedDay && (\r\n                <div className=\"modal\">\r\n                    {selectedDay.map((entry, index) => (\r\n                        <div key={index}>\r\n                            <div className='forecast_text'>시간: {entry.dt_txt.split(\" \")[1].slice(0, 5)}</div>\r\n                            <div className='forecast_text'>온도: {entry.main.temp}°C</div>\r\n                            <div className='forecast_text'>날씨: {entry.weather[0].description}</div>\r\n                            <img src={`http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`} alt={entry.weather[0].description} />\r\n                        </div>\r\n                    ))}\r\n                    <button onClick={() => setSelectedDay(null)}>닫기</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAG,kCAAkC;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,MAAMY,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;MACpD,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wDAAuDH,QAAS,QAAOC,SAAU,UAAST,OAAQ,uBAAsB,CAAC;QACvJ,MAAMY,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCX,WAAW,CAACU,IAAI,CAACE,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D;IACJ,CAAC;IAED,IAAIE,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,QAAQ,IAAI;QACjDb,gBAAgB,CAACa,QAAQ,CAACC,MAAM,CAACb,QAAQ,EAAEY,QAAQ,CAACC,MAAM,CAACZ,SAAS,CAAC;MACzE,CAAC,EAAE,MAAM;QACLa,kBAAkB,CAAC,OAAO,CAAC;MAC/B,CAAC,CAAC;IACN,CAAC,MAAM;MACHA,kBAAkB,CAAC,OAAO,CAAC;IAC/B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,kBAAkB,GAAIC,YAAY,IAAK;IACzCnB,OAAO,CAACmB,YAAY,CAAC;IACrBZ,KAAK,CAAE,sDAAqDY,YAAa,UAASvB,OAAQ,uBAAsB,CAAC,CAC5GwB,IAAI,CAACd,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CACjCW,IAAI,CAACZ,IAAI,IAAI;MACVV,WAAW,CAACU,IAAI,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,CACDW,KAAK,CAACV,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC,CAAC;EAChF,CAAC;EAED,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAChCL,kBAAkB,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1C,CAAC;EAED,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/B,MAAMC,QAAQ,GAAG,IAAIF,IAAI,CAACD,UAAU,CAAC;EACrCG,QAAQ,CAACC,OAAO,CAACJ,UAAU,CAACK,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAE1C,MAAMC,aAAa,GAAGnC,QAAQ,CAACoC,MAAM,CAACC,KAAK,IAAI;IAC3C,MAAMC,SAAS,GAAG,IAAIR,IAAI,CAACO,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1D,OAAOF,SAAS,IAAIT,UAAU,IAAIS,SAAS,GAAGN,QAAQ;EAC1D,CAAC,CAAC;EAEF,MAAMS,kBAAkB,GAAGzC,QAAQ,CAACoC,MAAM,CAACC,KAAK,IAAI;IAChD,MAAMC,SAAS,GAAG,IAAIR,IAAI,CAACO,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1D,OAAOF,SAAS,IAAIN,QAAQ;EAChC,CAAC,CAAC;EACF,MAAMU,eAAe,GAAGD,kBAAkB,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEP,KAAK,KAAK;IAC9D,MAAMQ,SAAS,GAAGC,kBAAkB,CAACT,KAAK,CAACE,MAAM,CAAC;IAClD,IAAI,CAACK,GAAG,CAACC,SAAS,CAAC,EAAED,GAAG,CAACC,SAAS,CAAC,GAAG,EAAE;IACxCD,GAAG,CAACC,SAAS,CAAC,CAACE,IAAI,CAACV,KAAK,CAAC;IAC1B,OAAOO,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEN;EACA,MAAME,kBAAkB,GAAIE,OAAO,IAAK;IACpC,MAAMC,IAAI,GAAG,IAAInB,IAAI,CAACkB,OAAO,CAAC;IAC9BC,IAAI,CAACC,WAAW,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,GAAE,CAAC,CAAC,CAAC,CAAC;IACzC,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACxD,OAAOA,YAAY,CAACH,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC;EACzC,CAAC;;EAKD;;EAIA,MAAMC,UAAU,GAAIC,OAAO,IAAK;IAC5B,OAAOA,OAAO,CAACZ,MAAM,CAAC,CAACC,GAAG,EAAEP,KAAK,KAAK;MAClC,MAAMmB,GAAG,GAAGV,kBAAkB,CAACT,KAAK,CAACE,MAAM,CAAC;MAC5C,IAAI,CAACK,GAAG,CAACY,GAAG,CAAC,EAAEZ,GAAG,CAACY,GAAG,CAAC,GAAG,EAAE;MAC5BZ,GAAG,CAACY,GAAG,CAAC,CAACT,IAAI,CAACV,KAAK,CAAC;MACpB,OAAOO,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC;EAED,MAAMa,kBAAkB,GAAIC,WAAW,IAAK;IACxC,MAAMC,UAAU,GAAG;MACf,GAAG,EAAE,CAAC,MAAM,CAAC;MACb,GAAG,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,cAAc,CAAC;MACxC,IAAI,EAAE,CAAC,QAAQ,CAAC;MAChB,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;MAC7B,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC;IAED,KAAK,IAAIC,UAAU,IAAID,UAAU,EAAE;MAC/B,KAAK,IAAIE,IAAI,IAAIF,UAAU,CAACC,UAAU,CAAC,EAAE;QACrC,IAAIF,WAAW,CAACI,QAAQ,CAACD,IAAI,CAAC,EAAE;UAC5B,OAAOD,UAAU;QACrB;MACJ;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EAED,MAAMG,SAAS,GAAIC,WAAW,IAAK;IAC/B3D,cAAc,CAAC2D,WAAW,CAAC;EAC/B,CAAC;EAED,MAAMC,kBAAkB,GAAGX,UAAU,CAACb,kBAAkB,CAAC;;EAG7D;;EAIA,oBACI7C,OAAA;IAAKsE,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzBvE,OAAA;MAAIsE,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE9B3E,OAAA;MAAQgC,KAAK,EAAE1B,IAAK;MAACsE,QAAQ,EAAE/C,gBAAiB;MAAA0C,QAAA,gBAC5CvE,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,SAAS;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnC3E,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,SAAS;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnC3E,OAAA;QAAQgC,KAAK,EAAC,SAAS;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnC3E,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,UAAU;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpC3E,OAAA;QAAQgC,KAAK,EAAC,QAAQ;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC3E,OAAA;QAAQgC,KAAK,EAAC,QAAQ;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC3E,OAAA;QAAQgC,KAAK,EAAC,SAAS;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnC3E,OAAA;QAAQgC,KAAK,EAAC,OAAO;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjC3E,OAAA;QAAQgC,KAAK,EAAC,MAAM;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChC3E,OAAA;QAAQgC,KAAK,EAAC,QAAQ;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC3E,OAAA;QAAQgC,KAAK,EAAC,QAAQ;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC3E,OAAA;QAAQgC,KAAK,EAAC,QAAQ;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC3E,OAAA;QAAQgC,KAAK,EAAC,UAAU;QAAAuC,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAET3E,OAAA;MAAKsE,SAAS,EAAC,cAAc;MAAAC,QAAA,EACxBhC,aAAa,CAACsC,GAAG,CAAC,CAACpC,KAAK,EAAEqC,KAAK,kBAC5B9E,OAAA;QAAiBsE,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBACvCvE,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAACE,MAAM,CAACoC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjF3E,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAACwC,IAAI,CAACC,IAAI,EAAC,OAAE;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5D3E,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvE3E,OAAA;UAAKqF,GAAG,EAAG,oCAAmC5C,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACG,IAAK,MAAM;UAACC,GAAG,EAAE9C,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACC;QAAY;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAJ1GG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEN3E,OAAA;MAAKsE,SAAS,EAAC,cAAc;MAAAC,QAAA,EACpBiB,MAAM,CAACC,IAAI,CAACpB,kBAAkB,CAAC,CAACQ,GAAG,CAACjB,GAAG,IAAI;QACxC,MAAM8B,UAAU,GAAGrB,kBAAkB,CAACT,GAAG,CAAC;QAC1C,MAAM+B,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGH,UAAU,CAACb,GAAG,CAACpC,KAAK,IAAIA,KAAK,CAACwC,IAAI,CAACC,IAAI,CAAC,CAAC;QACrE,MAAMY,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGL,UAAU,CAACb,GAAG,CAACpC,KAAK,IAAIA,KAAK,CAACwC,IAAI,CAACC,IAAI,CAAC,CAAC;QACrE,MAAMc,YAAY,GAAGnC,kBAAkB,CAAC6B,UAAU,CAACb,GAAG,CAACpC,KAAK,IAAIA,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAACgB,WAAW,CAAC,CAAC,CAAC,CAAC;QAErG,oBACIjG,OAAA;UAAesE,SAAS,EAAC,gBAAgB;UAAC4B,OAAO,EAAEA,CAAA,KAAM/B,SAAS,CAACuB,UAAU,CAAE;UAAAnB,QAAA,gBAC3EvE,OAAA;YAAKsE,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,gBAAI,EAACX,GAAG;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC9C3E,OAAA;YAAKsE,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,gBAAI,EAACoB,OAAO,EAAC,UAAK,EAACG,OAAO,EAAC,OAAE;UAAA;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClE3E,OAAA;YAAKqF,GAAG,EAAG,oCAAmCW,YAAa,MAAM;YAACT,GAAG,EAAES;UAAa;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,GAHjFf,GAAG;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIR,CAAC;MAEd,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAELnE,WAAW,iBACRR,OAAA;MAAKsE,SAAS,EAAC,OAAO;MAAAC,QAAA,GACjB/D,WAAW,CAACqE,GAAG,CAAC,CAACpC,KAAK,EAAEqC,KAAK,kBAC1B9E,OAAA;QAAAuE,QAAA,gBACIvE,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAACE,MAAM,CAACoC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjF3E,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAACwC,IAAI,CAACC,IAAI,EAAC,OAAE;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5D3E,OAAA;UAAKsE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,gBAAI,EAAC9B,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvE3E,OAAA;UAAKqF,GAAG,EAAG,oCAAmC5C,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACG,IAAK,MAAM;UAACC,GAAG,EAAE9C,KAAK,CAAC0C,OAAO,CAAC,CAAC,CAAC,CAACC;QAAY;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAJ1GG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACR,CAAC,eACF3E,OAAA;QAAQkG,OAAO,EAAEA,CAAA,KAAMzF,cAAc,CAAC,IAAI,CAAE;QAAA8D,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAAzE,EAAA,CAzLYD,OAAO;AAAAkG,EAAA,GAAPlG,OAAO;AAAA,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}