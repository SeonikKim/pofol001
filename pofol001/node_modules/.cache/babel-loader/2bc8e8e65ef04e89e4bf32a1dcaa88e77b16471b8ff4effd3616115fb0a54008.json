{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjsdl\\\\Desktop\\\\portfolio\\\\pofol001\\\\src\\\\views\\\\pages\\\\Weather.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../css/Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Weather = () => {\n  _s();\n  const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\n  const [forecast, setForecast] = useState(null);\n  const [city, setCity] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\n        const data = await response.json();\n\n        // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\n        const currentTime = new Date().getTime();\n        const sortedForecast = data.list.sort((a, b) => {\n          const timeA = new Date(a.dt_txt).getTime();\n          const timeB = new Date(b.dt_txt).getTime();\n          return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\n        });\n        setForecast(sortedForecast);\n      } catch (error) {\n        console.error('Error fetching the weather data', error);\n      }\n    };\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeatherData(position.coords.latitude, position.coords.longitude);\n      }, () => {\n        fetchWeatherByCity('Seoul');\n      });\n    } else {\n      fetchWeatherByCity('Seoul');\n    }\n  }, []);\n  const fetchWeatherByCoords = (lat, lon) => {\n    // 이 함수는 더 이상 사용되지 않으므로 제거합니다.\n  };\n  const fetchWeatherByCity = city => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=kr`).then(response => response.json()).then(data => setForecast(data.list)).catch(error => console.error('Error fetching the weather data', error));\n  };\n  const handleCityChange = event => {\n    setCity(event.target.value);\n    fetchWeatherByCity(event.target.value);\n  };\n  const getKoreanDayOfWeek = dateStr => {\n    const date = new Date(dateStr);\n    const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n    return daysInKorean[date.getUTCDay()];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather-Wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Title\",\n      children: \"\\uB0A0\\uC528\\uC815\\uBCF4\\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: city,\n      onChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), forecast ? forecast.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-entry\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast_text\",\n        children: [\"\\uC694\\uC77C: \", getKoreanDayOfWeek(entry.dt_txt)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast_text\",\n        children: [\"\\uC2DC\\uAC04: \", entry.dt_txt.split(\" \")[1].slice(0, 5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast_text\",\n        children: [\"\\uC628\\uB3C4: \", entry.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast_text\",\n        children: [\"\\uB0A0\\uC528: \", entry.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`,\n        alt: entry.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB0A0\\uC528 \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Weather, \"DVq9sBDdJQUQuG2sOyawNuTiH1A=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Weather","_s","API_KEY","forecast","setForecast","city","setCity","fetchWeatherData","latitude","longitude","response","fetch","data","json","currentTime","Date","getTime","sortedForecast","list","sort","a","b","timeA","dt_txt","timeB","Math","abs","error","console","navigator","geolocation","getCurrentPosition","position","coords","fetchWeatherByCity","fetchWeatherByCoords","lat","lon","then","catch","handleCityChange","event","target","value","getKoreanDayOfWeek","dateStr","date","daysInKorean","getUTCDay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","entry","index","split","slice","main","temp","weather","description","src","icon","alt","_c","$RefreshReg$"],"sources":["C:/Users/tjsdl/Desktop/portfolio/pofol001/src/views/pages/Weather.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../css/Weather.css';\r\n\r\nexport const Weather = () => {\r\n    const API_KEY = \"163c2c5f76b523d8d2147930060e9bb9\";\r\n    const [forecast, setForecast] = useState(null);\r\n    const [city, setCity] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async (latitude, longitude) => {\r\n            try {\r\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`);\r\n                const data = await response.json();\r\n\r\n                // 현재 시간을 기준으로 가장 가까운 날씨 정보를 위로 정렬\r\n                const currentTime = new Date().getTime();\r\n                const sortedForecast = data.list.sort((a, b) => {\r\n                    const timeA = new Date(a.dt_txt).getTime();\r\n                    const timeB = new Date(b.dt_txt).getTime();\r\n                    return Math.abs(timeA - currentTime) - Math.abs(timeB - currentTime);\r\n                });\r\n\r\n                setForecast(sortedForecast);\r\n            } catch (error) {\r\n                console.error('Error fetching the weather data', error);\r\n            }\r\n        };\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                fetchWeatherData(position.coords.latitude, position.coords.longitude);\r\n            }, () => {\r\n                fetchWeatherByCity('Seoul');\r\n            });\r\n        } else {\r\n            fetchWeatherByCity('Seoul');\r\n        }\r\n    }, []);\r\n\r\n    const fetchWeatherByCoords = (lat, lon) => {\r\n        // 이 함수는 더 이상 사용되지 않으므로 제거합니다.\r\n    }\r\n\r\n    const fetchWeatherByCity = (city) => {\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=kr`)\r\n            .then(response => response.json())\r\n            .then(data => setForecast(data.list))\r\n            .catch(error => console.error('Error fetching the weather data', error));\r\n    }\r\n\r\n    const handleCityChange = (event) => {\r\n        setCity(event.target.value);\r\n        fetchWeatherByCity(event.target.value);\r\n    }\r\n\r\n    const getKoreanDayOfWeek = (dateStr) => {\r\n        const date = new Date(dateStr);\r\n        const daysInKorean = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n        return daysInKorean[date.getUTCDay()];\r\n    }\r\n\r\n    return (\r\n        <div className=\"Weather-Wrap\">\r\n            <h1 className=\"Title\">날씨정보페이지</h1>\r\n\r\n            <select value={city} onChange={handleCityChange}>\r\n                {/* 옵션들은 동일하게 유지 */}\r\n            </select>\r\n            {forecast ? (\r\n                forecast.map((entry, index) => (\r\n                    <div key={index} className=\"forecast-entry\">\r\n                        <div className='forecast_text'>요일: {getKoreanDayOfWeek(entry.dt_txt)}</div>\r\n                        <div className='forecast_text'>시간: {entry.dt_txt.split(\" \")[1].slice(0, 5)}</div>\r\n                        <div className='forecast_text'>온도: {entry.main.temp}°C</div>\r\n                        <div className='forecast_text'>날씨: {entry.weather[0].description}</div>\r\n                        <img src={`http://openweathermap.org/img/wn/${entry.weather[0].icon}.png`} alt={entry.weather[0].description} />\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>날씨 데이터를 가져오는 중...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}